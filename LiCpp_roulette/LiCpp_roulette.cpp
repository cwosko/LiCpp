/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/


//  Name: LiC++ - Let it Crash in C++ - Roulette Example
//  Copyright: Boost Software License - Version 1.0 - August 17th, 2003
//  Author: Christoph Woskowski, cwo_at_zuehlke.com
//
//  Description:
//    This is the implementation of the roulett example from the book
//    "Seven Languages in Seven Weeks" by Bruce A. Tate. The original
//    Erlang example code can be downloaded here:
//    https://pragprog.com/titles/btlang/source_code
//    A worker thread "roulette" receives numbers from 1 to 6 entered
//    by the user. All numbers except 3 just lead to a "click". Number
//    3 kills the thread with a "bang".


#include "LiC++.h"

#include <iostream>

using namespace std;
using namespace LiCpp;

struct msg_number {
  msg_number(uint8_t _number): number(_number) {}
  uint8_t number;
};

void roulette(pMsgBox incoming)
{
  incoming->wait()
  .handle_if<msg_number>(
  [&](msg_number const& msg) {
    return msg.number == 3;
  },
  [&]() {
    cout << "bang." << endl;
    throw runtime_error("Dead by bullet!");
  }
  )
  .handle_default(
  [&]() {
    cout << "click." << endl;
  }
  );
}

#ifndef TEST

int main()
{
  pLiCppRuntime p_run = make_shared<LiCppRuntime>();

  ThreadId roulette_id = p_run->spawn_messaging(roulette);

  bool quit_pressed=false;
  thread char_thread(
  [&]() {
    while (!quit_pressed) {
      char c = getchar();
      if (c=='q')
        quit_pressed=true;
      else if ((c>='0') && (c<='9')) {
        p_run->send_message(roulette_id, msg_number(c-'0'));
        if (!p_run->thread_registered(roulette_id))
          cout << "Player is dead!" << endl;
      }
    }
  }
  );

  while(!quit_pressed) {
    p_run->exec();
    this_thread::sleep_for(chrono::milliseconds(10));
  }

  char_thread.join();
  return 0;
}

#else

int main()
{
  pLiCppRuntime p_run = make_shared<LiCppRuntime>();

  ThreadId roulette_id = p_run->spawn_messaging(roulette);

  bool test_done=false;
  thread test_thread(
  [&]() {
    p_run->send_message(roulette_id, msg_number(2));
    p_run->send_message(roulette_id, msg_number(4));
    p_run->send_message(roulette_id, msg_number(3));
    p_run->send_message(roulette_id, msg_number(1));
    this_thread::sleep_for(chrono::milliseconds(10));
    if (!p_run->thread_registered(roulette_id))
      cout << "Player is dead!" << endl;
    test_done=true;
  }
  );

  while(!test_done) {
    p_run->exec();
    this_thread::sleep_for(chrono::milliseconds(10));
  }

  test_thread.join();
  return 0;
}

#endif
