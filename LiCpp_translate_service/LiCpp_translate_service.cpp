/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/


//  Name: LiC++ - Let it Crash in C++ - Translate Service Example
//  Copyright: Boost Software License - Version 1.0 - August 17th, 2003
//  Author: Christoph Woskowski, cwo_at_zuehlke.com
//
//  Description:
//    This is the implementation of the translate service example from the
//    book "Seven Languages in Seven Weeks" by Bruce A. Tate. The original
//    Erlang example code can be downloaded here:
//    https://pragprog.com/titles/btlang/source_code
//    A synchronous translator expects strings to be translated entered
//    by the user, sends it to a translation service and blocking waits
//    for the result. If the word is unknown, it prints "don't understand".

#include "LiC++.h"

#include <iostream>

using namespace std;
using namespace LiCpp;


pLiCppRuntime p_run = nullptr;
ThreadId messaging_id;

struct msg_request {
  msg_request(string _text, ThreadId _sender_id): text(_text), sender_id(_sender_id) {}
  string text;
  ThreadId sender_id;
};

struct msg_response {
  msg_response(string _text):text(_text) {}
  string text;
};

void msg_handler(pMsgBox incoming)
{
  incoming->wait()
  .handle_if<msg_request>(
  [&](msg_request const& msg) {
    return msg.text == "casa";
  },
  [&](msg_request const& msg) {
    p_run->send_message(msg.sender_id, msg_response("house"));
  }
  )
  .handle_if<msg_request>(
  [&](msg_request const& msg) {
    return msg.text == "blanca";
  },
  [&](msg_request const& msg) {
    p_run->send_message(msg.sender_id, msg_response("white"));
  }
  )
  .handle_default(
  [&](shared_ptr<messaging::message_base> const& msg) {
    auto wrapped_msg = dynamic_cast<messaging::wrapped_message<msg_request>*>(msg.get());
    if (wrapped_msg) {
      p_run->send_message(
        wrapped_msg->contents.sender_id,
        msg_response("Don't understand!")
      );
    }
  }
  );
}

void translate(ThreadId id, string text)
{
  ThreadId my_id = this_thread::get_id();
  p_run->send_message(id, msg_request(text, my_id));
  p_run->execute_blocking(
    my_id,
  [&](pMsgBox incoming) {
    incoming->wait()
    .handle<msg_response>(
    [&](msg_response const& msg) {
      cout << msg.text << endl;
    }
    );
  }
  );
}

#ifndef TEST

int main()
{

  p_run = make_shared<LiCppRuntime>();

  messaging_id = p_run->spawn_messaging(msg_handler);

  bool quit_pressed=false;
  thread char_thread(
  [&]() {
    ThreadId my_id = this_thread::get_id();
    p_run->add_messaging_to_thread(my_id);

    while (!quit_pressed) {
      string in_data;
      cin >> in_data;
      if (in_data=="q") {
        p_run->remove_messaging_from_thread(my_id);
        quit_pressed=true;
      } else
        translate(messaging_id, in_data);
    }
  }
  );

  while(!quit_pressed) {
    p_run->exec();
    this_thread::sleep_for(chrono::milliseconds(10));
  }

  char_thread.join();
  return 0;
}

#else

int main()
{
  p_run = make_shared<LiCppRuntime>();

  messaging_id = p_run->spawn_messaging(msg_handler);

  bool test_done=false;
  thread test_thread(
  [&]() {
    ThreadId my_id = this_thread::get_id();
    p_run->add_messaging_to_thread(my_id);

    translate(messaging_id, "casa");
    translate(messaging_id, "blanca");
    translate(messaging_id, "humphrey");

    p_run->remove_messaging_from_thread(my_id);
    test_done=true;
  }
  );

  while(!test_done) {
    p_run->exec();
    this_thread::sleep_for(chrono::milliseconds(10));
  }

  test_thread.join();
  return 0;
}

#endif
