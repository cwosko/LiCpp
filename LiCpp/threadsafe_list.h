/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

//  Name: Threadsafe List
//  Description:
//    This code is based on listing_6.13 from the book "C++ Concurrency in Action"
//    by Anthony Williams. For explanation refer to the above mentioned book.

#ifndef THREADSAFE_LIST_H_
#define THREADSAFE_LIST_H_

#include <memory>
#include <mutex>

template<typename T>
class threadsafe_list {
    struct node {
      std::recursive_mutex m;
      std::shared_ptr<T> data;
      std::unique_ptr<node> next;

      node():
        next() {
      }

      node(T const& value):
        data(std::make_shared<T>(value)) {
      }
      node(T&& value):
        data(std::make_shared<T>(std::move(value))) {
      }
    };

    node head;

  public:
    threadsafe_list() {
    }

    ~threadsafe_list() {
      remove_if([](T const&) {
        return true;
      });
    }

    threadsafe_list(threadsafe_list const& other)=delete;
    threadsafe_list& operator=(threadsafe_list const& other)=delete;

    void push_front(T const& value) {
      std::unique_ptr<node> new_node(new node(value));
      std::lock_guard<std::recursive_mutex> lk(head.m);
      new_node->next=std::move(head.next);
      head.next=std::move(new_node);
    }

    void push_front(T&& value) {
      std::unique_ptr<node> new_node(new node(std::move(value)));
      std::lock_guard<std::recursive_mutex> lk(head.m);
      new_node->next=std::move(head.next);
      head.next=std::move(new_node);
    }

    template<typename Function>
    void for_each(Function f) {
      node* current=&head;
      std::unique_lock<std::recursive_mutex> lk(head.m);
      while(node* const next=current->next.get()) {
        std::unique_lock<std::recursive_mutex> next_lk(next->m);
        lk.unlock();
        f(*next->data);
        current=next;
        lk=std::move(next_lk);
      }
    }

    template<typename Predicate>
    std::shared_ptr<T> find_first_if(Predicate p) {
      node* current=&head;
      std::unique_lock<std::recursive_mutex> lk(head.m);
      while(node* const next=current->next.get()) {
        std::unique_lock<std::recursive_mutex> next_lk(next->m);
        lk.unlock();
        if(p(*next->data)) {
          return next->data;
        }
        current=next;
        lk=std::move(next_lk);
      }
      return std::shared_ptr<T>();
    }

    template<typename Predicate>
    void remove_if(Predicate p) {
      node* current=&head;
      std::unique_lock<std::recursive_mutex> lk(head.m);
      while(node* const next=current->next.get()) {
        std::unique_lock<std::recursive_mutex> next_lk(next->m);
        if(p(*next->data)) {
          std::unique_ptr<node> old_next=std::move(current->next);
          current->next=std::move(next->next);
          next_lk.unlock();
        } else {
          lk.unlock();
          current=next;
          lk=std::move(next_lk);
        }
      }
    }
};

#endif /* THREADSAFE_LIST_H_ */
